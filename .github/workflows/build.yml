name: Build Keenetic Huawei Integration Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Keenetic SDK
        run: |
          git clone --depth 1 --branch 4.03 https://github.com/keenetic/keenetic-sdk.git
          mkdir -p keenetic-sdk/package/keenetic-huawei-integration
          find . -maxdepth 1 -not -path "./keenetic-sdk" -not -path . -not -path "./.git" -exec cp -r {} keenetic-sdk/package/keenetic-huawei-integration/ \;
          cd keenetic-sdk
          mkdir -p dl
          curl -sL https://github.com/jvoisin/fortify-headers/releases/download/2.1/fortify-headers-2.1.tar.gz > dl/fortify-headers-2.1.tar.gz
          sudo apt update
          sudo apt install -y build-essential git python3 attr bc curl gawk libhtml-parser-perl libjson-perl libncurses-dev libssl-dev libxml-libxml-perl subversion unzip zlib1g-dev make gcc g++ lzip gperf protobuf-c-compiler flex bison util-linux cmake libc-dev gcc-multilib g++-multilib musl musl-dev musl-tools binutils patch
          echo "Checking if flock is installed..."
          if command -v flock >/dev/null 2>&1; then
            echo "flock found at $(which flock)"
          else
            echo "flock NOT found in system, exiting..."
            exit 1
          fi
          echo "Ensuring staging_dir/host/bin exists..."
          mkdir -p staging_dir/host/bin
          echo "Copying flock to staging_dir/host/bin..."
          sudo cp $(which flock) staging_dir/host/bin/ || {
            echo "Failed to copy flock to staging_dir/host/bin/"
            echo "Checking if staging_dir/host/bin is writable..."
            ls -ld staging_dir/host/bin/
            exit 1
          }
          echo "flock copied successfully to staging_dir/host/bin/"
          echo "Listing available devices..."
          ./configure.sh -l
          echo "Running configure.sh for KN-2311..."
          ./configure.sh KN-2311 > configure.log 2>&1 || {
            echo "configure.sh for KN-2311 failed, see configure.log"
            cat configure.log
            echo "Trying preset 'all'..."
            ./configure.sh -p all > configure_all.log 2>&1 || { echo "configure.sh with preset 'all' failed"; cat configure_all.log; exit 1; }
          }
          if [ ! -f .config ]; then
            echo ".config file not created!"
            exit 1
          fi
          echo ".config file created successfully"
          echo "Checking .config for mipsel architecture..."
          grep -E 'CONFIG_TARGET_mipsel|CONFIG_ARCH="mipsel"' .config || echo "No mipsel configuration found in .config"
          echo "Ensuring toolchain configuration in .config..."
          echo "CONFIG_TOOLCHAINOPTS=y" >> .config
          echo "CONFIG_GCC=y" >> .config
          echo "CONFIG_BINUTILS=y" >> .config
          echo "CONFIG_MUSL=y" >> .config
          echo "CONFIG_GCC_VERSION=\"12.3.0\"" >> .config
          echo "CONFIG_TARGET_mipsel=y" >> .config
          echo "CONFIG_TARGET_SUBARCH=\"mipsel_24kc\"" >> .config
          echo "CONFIG_CROSS_COMPILER_PREFIX=\"mipsel-ndms-linux-musl-\"" >> .config
          echo "CONFIG_BUILD_LOG=y" >> .config
          cat .config
          echo "Running make oldconfig to sync configuration..."
          make oldconfig
          if [ $? -ne 0 ]; then
            echo "make oldconfig failed!"
            exit 1
          fi
          echo "make oldconfig completed successfully"

      - name: Patch fortify-headers download
        run: |
          cd keenetic-sdk
          echo "Patching fortify-headers download URL..."
          sed -i 's|http://dl.2f30.org/releases|https://github.com/jvoisin/fortify-headers/releases/download/2.1|' toolchain/fortify-headers/Makefile
          cat toolchain/fortify-headers/Makefile

      - name: Patch toolchain prefix
        run: |
          cd keenetic-sdk
          echo "Patching toolchain Makefiles for mipsel-ndms-linux-musl..."
          sed -i 's|mipsel-linux-musl-|mipsel-ndms-linux-musl-|g' toolchain/gcc/Makefile
          sed -i 's|mipsel-linux-musl-|mipsel-ndms-linux-musl-|g' toolchain/binutils/Makefile
          sed -i 's|mipsel-linux-musl-|mipsel-ndms-linux-musl-|g' toolchain/musl/Makefile
          cat toolchain/gcc/Makefile
          cat toolchain/binutils/Makefile
          cat toolchain/musl/Makefile

      - name: Build toolchain
        run: |
          cd keenetic-sdk
          echo "Cleaning toolchain..."
          make toolchain/clean V=s 2>&1 | tee toolchain_clean.log || { echo "make toolchain/clean failed, see toolchain_clean.log"; cat toolchain_clean.log; exit 1; }
          echo "Building tools..."
          make tools/install V=s 2>&1 | tee tools_install.log || { echo "make tools/install failed, see tools_install.log"; cat tools_install.log; exit 1; }
          echo "Building toolchain..."
          make toolchain/install V=s 2>&1 | tee toolchain_install.log || { echo "make toolchain/install failed, see toolchain_install.log"; cat toolchain_install.log; exit 1; }
          echo "Listing contents of staging_dir..."
          ls -R staging_dir/ || true
          echo "Checking for toolchain directories..."
          find staging_dir/ -type d -name "toolchain*" || true
          echo "Listing contents of build_dir..."
          ls -R build_dir/ || true
          echo "Checking for mipsel-ndms-linux-musl toolchain..."
          if [ -d staging_dir/toolchain-mipsel-ndms-linux-musl/bin ]; then
            echo "mipsel-ndms-linux-musl bin directory found"
            ls -l staging_dir/toolchain-mipsel-ndms-linux-musl/bin/
            if [ -f staging_dir/toolchain-mipsel-ndms-linux-musl/bin/mipsel-ndms-linux-musl-gcc ]; then
              echo "mipsel-ndms-linux-musl-gcc found"
            else
              echo "mipsel-ndms-linux-musl-gcc NOT found"
            fi
            if [ -f staging_dir/toolchain-mipsel-ndms-linux-musl/bin/mipsel-ndms-linux-musl-strip ]; then
              echo "mipsel-ndms-linux-musl-strip found"
            else
              echo "mipsel-ndms-linux-musl-strip NOT found"
            fi
          else
            echo "mipsel-ndms-linux-musl bin directory NOT found"
            ls -R staging_dir/toolchain-mipsel-linux-musl/ || true
            ls -R staging_dir/toolchain-mipsel-ndms-linux-musl/ || true
            exit 1
          fi
          echo "Listing contents of staging_dir/host/bin..."
          ls -l staging_dir/host/bin/

      - name: Debug directory contents
        run: |
          cd keenetic-sdk
          echo "Listing contents of package directory:"
          ls -R package/
          echo "Listing contents of package/keenetic-huawei-integration:"
          ls -R package/keenetic-huawei-integration/
          echo "Checking Makefile existence:"
          if [ -f package/keenetic-huawei-integration/Makefile ]; then
            echo "Makefile found in package/keenetic-huawei-integration"
            cat package/keenetic-huawei-integration/Makefile
          else
            echo "Makefile NOT found in package/keenetic-huawei-integration"
            exit 1
          fi

      - name: Build OPKG package
        run: |
          cd keenetic-sdk
          make package/keenetic-huawei-integration/clean V=s
          make package/keenetic-huawei-integration/compile V=s 2>&1 | tee package_compile.log || { echo "make package/keenetic-huawei-integration/compile failed, see package_compile.log"; cat package_compile.log; exit 1; }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: keenetic-huawei-integration
          path: keenetic-sdk/bin/packages/mipsel/keenetic-huawei-integration_1.0-1_mipsel.ipk

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          files: keenetic-sdk/bin/packages/mipsel/keenetic-huawei-integration_1.0-1_mipsel.ipk
          tag_name: v1.0.${{ github.run_number }}
          name: Release v1.0.${{ github.run_number }}
          body: |
            Auto-generated release for Huawei Integration OPKG package.
            Download `keenetic-huawei-integration_1.0-1_mipsel.ipk` below for Keenetic routers (Hero 4G+, Skipper 4G, Explorer 4G, Runner 4G) to integrate with Huawei routers (B636-336, B535-232a-LTE, B530-336, B320-323).
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
